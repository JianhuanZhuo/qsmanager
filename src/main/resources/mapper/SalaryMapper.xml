<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    private long id;
    private StuffDao stuffDao;
    private BigDecimal basicSalary;
    private BigDecimal ageSalary;
    private BigDecimal totalSalary;
    private Date date;
    clear
-->

<mapper namespace="cn.keepfight.qsmanager.Mapper.SalaryMapper">

    <select id="selectSalarysByMonth" resultType="SalaryDao_i">
        SELECT
            id        AS id,
            #{year}   AS year,
            #{month}  AS month,
            stuff_id  AS stuffDaoID,
            basic     AS basicSalary,
            ageSalary AS ageSalary,
            salary    AS totalSalary,
            fixSalary AS fixSalary,
            date      AS date,
            clear     AS clear
        FROM stuff_salary
        WHERE year = #{year} AND month = #{month};
    </select>

    <select id="selectSalarysByMonthAndStuff" resultType="SalaryDao_i">
        SELECT
            id        AS id,
            #{year}   AS year,
            #{month}  AS month,
            stuff_id  AS stuffDaoID,
            basic     AS basicSalary,
            ageSalary AS ageSalary,
            salary    AS totalSalary,
            fixSalary AS fixSalary,
            date      AS date,
            clear     AS clear
        FROM stuff_salary
        WHERE year = #{year} AND month = #{month} AND stuff_id = #{stuff_id}
    </select>

    <!--选择-->
    <select id="selectStuffCanAddByMonth" resultMap="cn.keepfight.qsmanager.Mapper.StuffMapper.result_stuff">
        SELECT
            stuff.id                  id,
            stuff.serial              serial,
            stuff.name                name,
            stuff.salary_basic        salary_basic,
            stuff.salary_annual       salary_annual,
            operator.id               operator_id,
            operator.account          operator_account,
            operator.password         operator_password,
            operator.authority        operator_authority,
            operator.last_login_stamp operator_last_login_stamp,
            user.id                   operator_user_id,
            user.nickname             operator_user_nickname,
            user.halt                 operator_user_halt,
            user.note                 operator_user_note
        FROM stuff, operator, user
        WHERE stuff.operator_id = operator.id
              AND operator.user_id = user.id
              AND stuff.id NOT IN (
            SELECT stuff_id
            FROM stuff_salary
            WHERE year = #{year} AND month = #{month}
        )
        ORDER BY stuff.serial
    </select>

    <insert id="addNewSalary" parameterType="SalaryDao">
        INSERT INTO stuff_salary (
        stuff_id,
        year,
        month,
        salary,
        fixSalary,
        basic,
        ageSalary,
        clear
        <if test="date!=null">
            ,date
        </if>
        )
        VALUES (
        #{stuffDao.id},
        #{year},
        #{month},
        #{totalSalary},
        #{fixSalary},
        #{basicSalary},
        #{ageSalary},
        #{clear}
        <if test="date!=null">
            ,#{date}
        </if>
        )
        <selectKey keyProperty="id" order="AFTER" resultType="long">
            SELECT last_insert_id();
        </selectKey>
    </insert>

    <!--* 修改指定年月和工人 ID 的当月工资-->
    <!--void updateSalarysByMonthAndStuff(SalaryDao salaryDao) throws Exception;-->
    <update id="updateSalarysByMonthAndStuff" parameterType="SalaryDao">
        UPDATE stuff_salary
        SET
            salary    = #{totalSalary},
            basic     = #{basicSalary},
            ageSalary = #{ageSalary},
            fixSalary = #{fixSalary},
            date      = #{date},
            clear     = #{clear}
        WHERE
            stuff_id = #{stuffDao.id}
            AND year = #{year}
            AND month = #{month}
    </update>

    <!--* 修改指定年月的固定工资发放时间-->
    <!--void updateSalarysDateByMonth(@Param("year") Long year, @Param("month") Long month, @Param("date") Date date) throws Exception;-->
    <update id="updateSalarysDateByMonth">
        UPDATE stuff_salary
        SET
            date = #{date}
        WHERE year = #{year}
              AND month = #{month}
    </update>

    <delete id="deleteByMonthAndStuff" parameterType="SalaryDao">
        DELETE FROM stuff_salary
        WHERE
            stuff_id = #{stuffDao.id}
            AND year = #{year}
            AND month = #{month}
    </delete>

    <select id="staticSalaryByYear" parameterType="long" resultType="YearStaticDao">
        SELECT
            mon AS month,
            ifnull(total, 0) AS total,
            ifnull(sum, 0)   AS given
        FROM
            mons m
            LEFT JOIN
            (
                SELECT
                    month,
                    sum(salary)                                 total,
                    sum(salary - fixSalary - ifnull(sum, 0)) AS sum
                FROM
                    stuff_salary s
                    LEFT JOIN (
                                  SELECT
                                      i.salary_id,
                                      sum(i.income) sum
                                  FROM stuff_income i
                                  GROUP BY i.salary_id
                              ) x
                        ON s.id = x.salary_id
                WHERE
                    s.year = #{year}
                GROUP BY month
            ) x
                ON x.month = m.mon
    </select>

    <select id="selectStuffSalaryTardy" resultType="SalaryTardyDao">
        SELECT
            u.id                                     AS id,
            u.name                                   AS name,
            sum(salary - fixSalary - ifnull(sum, 0)) AS sum
        FROM
            stuff u, stuff_salary s
            LEFT JOIN (
                          SELECT
                              i.salary_id,
                              sum(i.income) sum
                          FROM stuff_income i
                          GROUP BY i.salary_id
                      ) x
                ON s.id = x.salary_id
        WHERE
            # 检查还没还完的
            (fixSalary + ifnull(sum, 0) <![CDATA[ < ]]> salary)
            AND
            u.id = s.stuff_id
        GROUP BY stuff_id;
    </select>


    <!--选择指定员工 ID 的拖欠工资及其月份，这个月份是对齐全部月份的-->
    <select id="selectTardyByStuff" parameterType="long" resultType="StuffTardyDao">
        SELECT
            m.ym           AS ym,
            ifnull(sum, 0) AS sum
        FROM
            (
                # 获得全部需要还的年月份
                SELECT DISTINCT concat(year, '-', lpad(month, 2, '0')) AS ym
                FROM
                    stuff_salary s
                    LEFT JOIN (
                                  SELECT
                                      i.salary_id,
                                      sum(i.income) sum
                                  FROM stuff_income i
                                  GROUP BY i.salary_id
                              ) x
                        ON s.id = x.salary_id
            ) AS m
            LEFT JOIN
            (
                # 获得指定需要还的
                SELECT
                    concat(year, '-', lpad(month, 2, '0')) AS ym,
                    salary - fixSalary - ifnull(sum, 0)    AS sum
                FROM
                    stuff_salary s
                    LEFT JOIN (
                                  SELECT
                                      i.salary_id,
                                      sum(i.income) sum
                                  FROM stuff_income i
                                  GROUP BY i.salary_id
                              ) x
                        ON s.id = x.salary_id
                WHERE s.stuff_id = #{stuff_id}
            ) AS s
                ON m.ym = s.ym;
    </select>
</mapper>