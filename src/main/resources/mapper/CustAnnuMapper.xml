<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.keepfight.qsmanager.Mapper.CustAnnuMapper">

    <!--选择指定年份、指定客户的年度对账表-->
    <!--CustAnnualModel selectAnnual(AnnualSelection selection) throws Exception;-->
    <select id="selectAnnual" parameterType="AnnualSelection" resultType="CustAnnualModel">
        SELECT *
        FROM cust_annual
        WHERE year = #{year}
              AND cid = #{sid}
    </select>

    <!--指定年份、指定客户查询年度对账的每月明细-->
    <!--List<CustAnnualMonModel> selectMon(AnnualSelection selection) throws Exception;-->
    <select id="selectMon" parameterType="AnnualSelection" resultType="CustAnnualMonModel">
        SELECT
            caid,
            mon,
            total,
            billunit,
            concat(unix_timestamp(billdate), '000')  AS billdate,
            billtotal,
            rate,
            remitunit,
            pattern,
            concat(unix_timestamp(remitdate), '000') AS remitdate,
            paytotal,
            note
        FROM cust_annual_mon sm, cust_annual s
        WHERE s.year = #{year} AND s.cid = #{sid}
              AND sm.caid = s.id
    </select>

    <!--插入新的年对账表，如果指定的年份的对账表已存在，则异常-->
    <!--void insertAnnual(CustAnnualModel model) throws Exception;-->
    <insert id="insertAnnual" parameterType="CustAnnualModel">
        insert into cust_annual (cid, year
        <if test="remainder!=null">
            , remainder
        </if>
        ) values (#{cid}, #{year}
        <if test="remainder!=null">
            , #{remainder}
        </if>);
        <selectKey keyProperty="id" order="AFTER" resultType="long">
            SELECT last_insert_id();
        </selectKey>
    </insert>


    <!--插入新的月明细，如果指定对账单的当前月份已存在会插入错误-->
    <!--void insertMon(CustAnnualMonModel model) throws Exception;-->
    <insert id="insertMon" parameterType="CustAnnualMonModel">
        INSERT INTO cust_annual_mon (
            caid,
            mon,
            total,
            billunit,
            billdate,
            billtotal,
            rate,
            remitunit,
            pattern,
            remitdate,
            paytotal,
            note)
        VALUES (
            #{caid},
            #{mon},
            #{total},
            #{billunit},
            from_unixtime(#{billdate}/1000),
            #{billtotal},
            #{rate},
            #{remitunit},
            #{pattern},
            from_unixtime(#{remitdate}/1000),
            #{paytotal},
            #{note}
        );
    </insert>

    <!--更新月明细-->
    <!--void updateMon(CustAnnualMonModel model) throws Exception;-->
    <update id="updateMon" parameterType="CustAnnualMonModel">
        UPDATE cust_annual_mon
        SET
            total     = #{total},
            billunit  = #{billunit},
            billdate  = from_unixtime(#{billdate}/1000),
            billtotal = #{billtotal},
            rate      = #{rate},
            remitunit = #{remitunit},
            pattern   = #{pattern},
            remitdate = from_unixtime(#{remitdate}/1000),
            paytotal  = #{paytotal},
            note      = #{note}
        WHERE caid = #{caid}
              AND mon = #{mon}
    </update>


    <!--查询指定客户和年份的全部月份的送货总额-->
    <!--List<AnnualTotalModel> supAnnualTotal(DeliverySelection selection);-->
    <select id="supAnnualTotal" parameterType="DeliverySelection" resultType="AnnualTotalModel">
        SELECT date_format(d.orderdate, '%m') AS mon, sum(di.price * di.num * di.pack) AS total
        FROM order_item di, orders d
        WHERE
        cid = #{cid}
        AND date_format(d.orderdate, '%Y') = #{year}
        AND di.oid = d.id
        GROUP BY date_format(d.orderdate, '%m')
        ORDER BY date_format(d.orderdate, '%m')
    </select>
</mapper>